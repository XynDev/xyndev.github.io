import{_ as a,c as i,o as e,ae as n}from"./chunks/framework.AELpvxz7.js";const c=JSON.parse('{"title":"Learning Variables","description":"A guide to understanding variables in JavaScript, how to declare them, and why they work the way they do.","frontmatter":{"title":"Learning Variables","description":"A guide to understanding variables in JavaScript, how to declare them, and why they work the way they do."},"headers":[],"relativePath":"beginner/variables.md","filePath":"beginner/variables.md"}'),t={name:"beginner/variables.md"};function l(r,s,h,o,p,k){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h1><p>Variables are one of the most fundamental building blocks in programming. They allow us to store, manipulate, and retrieve data throughout our code.</p><h2 id="what-is-a-variable" tabindex="-1">What Is a Variable? <a class="header-anchor" href="#what-is-a-variable" aria-label="Permalink to &quot;What Is a Variable?&quot;">​</a></h2><p>A variable is like a container that holds data. In JavaScript, variables can store numbers, strings, objects, and more. They help you keep track of information and work with it as your program runs.</p><div class="tip custom-block"><p class="custom-block-title">Quick Tip</p><p>Think of variables as labeled boxes where you can store data. The right label helps you remember what&#39;s inside!</p></div><h2 id="declaring-variables-in-javascript" tabindex="-1">Declaring Variables in JavaScript <a class="header-anchor" href="#declaring-variables-in-javascript" aria-label="Permalink to &quot;Declaring Variables in JavaScript&quot;">​</a></h2><p>JavaScript offers three primary ways to declare variables:</p><h3 id="var" tabindex="-1"><code>var</code> <a class="header-anchor" href="#var" aria-label="Permalink to &quot;\`var\`&quot;">​</a></h3><ul><li><strong>Scope:</strong> Function-scoped.</li><li><strong>Hoisting:</strong> Variables declared with <code>var</code> are hoisted to the top of their function.</li><li><strong>Usage:</strong> Once popular, but now less common due to some quirks that can lead to unexpected behavior.</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="let" tabindex="-1"><code>let</code> <a class="header-anchor" href="#let" aria-label="Permalink to &quot;\`let\`&quot;">​</a></h3><ul><li><strong>Scope:</strong> Block-scoped.</li><li><strong>Usage:</strong> Ideal when you expect the variable’s value to change.</li><li><strong>Benefits:</strong> Provides better control over the variable’s visibility and lifecycle.</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Updating the value is allowed.</span></span></code></pre></div><h3 id="const" tabindex="-1"><code>const</code> <a class="header-anchor" href="#const" aria-label="Permalink to &quot;\`const\`&quot;">​</a></h3><ul><li><strong>Scope:</strong> Block-scoped.</li><li><strong>Usage:</strong> Use when you want the variable&#39;s value to remain constant.</li><li><strong>Benefits:</strong> Helps prevent accidental reassignments, making your code safer.</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14159</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// PI = 3.14; // This will cause an error because reassignment is not permitted.</span></span></code></pre></div><p>::: note Important Always favor <code>let</code> or <code>const</code> over <code>var</code> to avoid issues with hoisting and unexpected behavior. :::</p><h2 id="variable-naming-conventions" tabindex="-1">Variable Naming Conventions <a class="header-anchor" href="#variable-naming-conventions" aria-label="Permalink to &quot;Variable Naming Conventions&quot;">​</a></h2><p>Good variable names improve code readability and maintainability. Here are some best practices:</p><ul><li><strong>Be Descriptive:</strong> Choose names that clearly describe the data.</li><li><strong>Use Camel Case:</strong> Start with a lowercase letter and capitalize subsequent words (e.g., <code>firstName</code>, <code>userAge</code>).</li><li><strong>Avoid Reserved Words:</strong> Do not use JavaScript reserved words like <code>class</code>, <code>return</code>, or <code>let</code>.</li></ul><h2 id="data-types-and-variables" tabindex="-1">Data Types and Variables <a class="header-anchor" href="#data-types-and-variables" aria-label="Permalink to &quot;Data Types and Variables&quot;">​</a></h2><p>Variables in JavaScript can hold various types of data:</p><ul><li><strong>Number:</strong> For numeric values.</li><li><strong>String:</strong> For text.</li><li><strong>Boolean:</strong> For true/false values.</li><li><strong>Object:</strong> For structured data.</li><li><strong>Array:</strong> A special type of object used for ordered lists.</li><li><strong>Undefined/Null:</strong> Represent the absence of a value.</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isActive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Boolean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  username: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;alice123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scores </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Array</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> notAssigned;        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emptyValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Null</span></span></code></pre></div><h2 id="understanding-scope" tabindex="-1">Understanding Scope <a class="header-anchor" href="#understanding-scope" aria-label="Permalink to &quot;Understanding Scope&quot;">​</a></h2><p>Scope determines where a variable can be accessed within your code:</p><ul><li><strong>Global Scope:</strong> Variables declared outside any function or block. Accessible from anywhere.</li><li><strong>Local Scope:</strong> Variables declared within a function or block. Accessible only within that specific area.</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I&#39;m global&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> showScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I&#39;m local&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(globalVar); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Accessible here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(localVar);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Accessible here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// console.log(localVar); // Error: localVar is not defined here</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">How It Works</p><p>Proper use of variable declarations and understanding scope is essential for managing data flow and avoiding errors in your programs.</p></div><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>Understanding how variables work is crucial for every programmer. By mastering variable declaration, naming, and scope, you build a strong foundation for learning more advanced JavaScript concepts.</p>`,31)]))}const g=a(t,[["render",l]]);export{c as __pageData,g as default};
